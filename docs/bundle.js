/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ (() => {

eval("\n \n// ***************************************  DECLARING GLOBAL VARIABLES AND CONSTANTS  ***********************************************************\n\n//*  jQuery constants (HTML elements)\nconst $question = $('#question');                                              \nconst $choices = $('.answerOption');                                              \nconst $questionDiv = $('#questionDiv');                                        \nconst $resultsDiv = $('#resultsDiv');                                                 \nconst $checkAnswerDiv = $('#checkAnswerDiv'); \nconst $imgQuestion = $('#imgQuestion'); \n\n//* plain JS constants(HTML elements)\nconst scoreText = document.querySelector('#score p');\nconst emoji = document.getElementById('emoji');\n\n// * constants for randomly choose the questions from firebase database.\nconst AMOUNT_QUESTIONS_QUIZ = 10;\nconst AMOUNT_QUESTIONS_COLLECTION = 50;\n\n// * INITIALING VARIABLE\nlet score = 0;\nlet questionCounter = 0;\nlet availableQuestions = [];\nlet currentQuestion = {};\nlet lastQuestionFlag = false;\nlet acceptingAnswers = false;\n\n// * global variable to calculate the points based in the time the user takes to click the option button,\n// *   I declare it globaly as it has to be accessed for more the one functions.\nlet startTime = new Date();  \n\n//* global variable to store the question from the Firebase database (it remains immutable).\nlet dbQuestions = [];\n\n\n// !(1) to launch the game setting up inline style ==> display: none to all the container tabs except #startDiv.\n\n$('.container').not('#startDiv').css('display', 'none');\n\n // * jQuery Event handler to the Start button to start the game\n$('#startBTN').on('click', function() {         \n    $('#startDiv').css('display', 'none');\n    $('#questionDiv').removeAttr('style');\n  });\n\n\n\n\n// * return an array with an amount(numberOfQuestion) of different random numbers from 0 to totalQuestions.\nfunction codeNumberQuestionArray(numberOfQuestions, totalQuestions){\n  let array = [];\n  while(array.length < numberOfQuestions){\n     let randomNumber = Math.floor(Math.random() * totalQuestions);\n     if(!array.includes(randomNumber)){array.push(randomNumber)}\n  }\n  return array;\n}\n\n\n\n// * Retrieve n number of random questions from the total document questions in a Firebase collection called 'questions'.\ndocument.addEventListener(\"DOMContentLoaded\", event => {\n\n  const app = firebase.app();\n\n  const db = firebase.firestore();\n\n  let array  = codeNumberQuestionArray(AMOUNT_QUESTIONS_QUIZ, AMOUNT_QUESTIONS_COLLECTION);\n\n  array.forEach( element => {\n      db.collection(\"questions\").where(\"CodeNumber\", \"==\", element)\n      .get()\n      .then(function(querySnapshot) {\n          querySnapshot.forEach(function(doc) {\n              dbQuestions.push(doc.data());\n          });\n      })\n      .catch(function(error) {\n          console.log(\"Error getting documents: \", error);\n      });\n  });\n});\n\n\n\n// ! STARTGAME FUNCTION\n// * I've turned it from an arrow function to a default function as it didn't work when I added type=\"module\" to the index.js script in the embedded html  \nfunction startGame(){\n  questionCounter = 0;\n  score = 0;\n  availableQuestions = [...dbQuestions];\n  getNewQuestion();\n}\n\n// ! GETNEWQUESTION FUNCTION\n// * I've turned it from an arrow function to a default function as it didn't work when I added type=\"module\" to the index.js script in the embedded html  \nfunction getNewQuestion (){\n\n  if(availableQuestions.length === 0 || questionCounter >= AMOUNT_QUESTIONS_QUIZ){\t\n      lastQuestionFlag = true;\n      let level = calculateLevel(score);\n      buildResultDiv($resultsDiv, level);\n  } else {\n    questionCounter++;\n\n    const questionIndex = Math.floor(Math.random() * availableQuestions.length);\n    currentQuestion = availableQuestions[questionIndex];\n\n    // * jQuery method to set up the text inside dd ORDINAL element and h1 question. \n    $question.html(`<dd>${questionCounter}/${AMOUNT_QUESTIONS_QUIZ}</dd><h1>${currentQuestion.question}</h1>`);\n    \n    $choices.each( function () {                             //* jQuery method each goes throught each .answerOption ($choices) element\n      const number = this.dataset['number'];                 //* getting its data-number attr and with that gets the currentQuestion.\n      $(this).text(currentQuestion[\"option\" + number]);  \n    });\n\n\n    getImageQuestion(currentQuestion);\n\n    availableQuestions.splice(questionIndex, 1);    \n    acceptingAnswers = true;  \n  }\n\n}\n\n\n//* function helper to retrieve the image from the firebase database and set the background-image inline css property.\nfunction getImageQuestion (currentQuestion) {\n  let storage = firebase.storage();\n\n  let gsReference = storage.refFromURL(`gs://londonquiz-f8499.appspot.com/${currentQuestion['pic']}`);\n\n  gsReference.getDownloadURL()\n  .then(function(url) {$imgQuestion.attr('src', `${url}`).attr('alt', `${currentQuestion['pic']}`)})\n  .catch(function(error) {console.log(`an error happened when trying to access the image => ${error}`)});\n}\n\n// * CALCULATESCORE FUNCTION subtracs the time that user takes to answers the question to 10000 ms if the answer is correct.\n// * if the time passes over 10000 ms the number of points will be set up to 100.\nfunction calculateScore(){\n  const timeTakes = (new Date() - startTime);\n  return  (timeTakes > 10000) ? 100 : 10000 - timeTakes;\n}\n\n//! EVENT LISTENER ATTACH TO CHOICE (ARRAY OF OPTIONS)\n  $choices.on(\"click\", e => {\n      if(!acceptingAnswers) return;\n      acceptingAnswers = false;\n      const selectedOption = e.target.innerText;\n      if(selectedOption == currentQuestion.correct){\n        console.log(calculateScore());\n        score += calculateScore();\n        $checkAnswerDiv.removeClass('wrong').addClass('correct');\n        emoji.innerText = 'ðŸ’‚'; \n      } else {\n        $checkAnswerDiv.removeClass('correct').addClass('wrong');\n        emoji.innerText =  'ðŸ’©';\n      }\n      scoreText.innerText = `${score}`; \n       \n      //* to hide questinDiv and show the checkAnswerDiv\n      $questionDiv.css('display', 'none'); $checkAnswerDiv.removeAttr('style');\n      \n      getNewQuestion();\n\n      setTimeout(() => { \n          if(!lastQuestionFlag){\n            //* to hide questinDiv and show the checkAnswerDiv\n            $checkAnswerDiv.css('display', 'none'); $questionDiv.removeAttr('style');\n            startTime = new Date();\n          } else {\n            //* to hide questinDiv and show the checkAnswerDiv\n            $checkAnswerDiv.css('display', 'none'); $resultsDiv.removeAttr('style');\n            setTimeout(() => { window.location.reload()}, 8000); //* reload the web application to start\n          }         \n          \n        } , 2000);\n\n});\n\n\n// * DISPLAY RESULTS DIV  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst myResults = [\n\n  {queenPic: `img/queen_faces/queen0.png`,\n   queenSays: `I'm shocked about your lack of knowledge, you are rubish!!`,\n   picSrc: `img/awards pics/square/dunce.jpg`},\n\n  {queenPic: `img/queen_faces/queen1.png`,\n   queenSays: `Not bad, I'll name you Member of the Order of the British Empire!`,\n   picSrc: `img/awards pics/square/mbe-medal.png`},\n\n  {queenPic: `img/queen_faces/queen2.png`,\n  queenSays: `I'm impressed with you, I'll name you Officer of the Order of the British Empire!`,\n  picSrc: `img/awards pics/square/obe-medal.png`},\n\n  {queenPic: `img/queen_faces/queen3.png`,\n  queenSays: `you are brilliant, I'll name you Commander of the Order of the British Empire!`,\n  picSrc: `img/awards pics/square/cbe-medal.jpg`},\n];\n\n//* return a value depending on the totalPoint variable.\nfunction calculateLevel(score){   \nif (score >= 90000){return 3;}\n  else if (score >= 60000){return 2;}\n    else if (score >= 30000){return 1;}\n    return 0;\n} \n\nfunction buildResultDiv(div, level){    \n  div.find('.badge').find('h1').text(`${score}`);\n  div.find('.badge').find('img#award').attr('src', myResults[level].picSrc);\n\n  div.find('img#queen').attr('src', myResults[level].queenPic);\n  div.find('#queenSentence').text(`${myResults[level].queenSays}`);\n}\n\n\n// * build the result div\n\n\n// * Start the game.\nsetTimeout(() => {startGame()}, 500);\n\n\n\n\n\n\n//# sourceURL=webpack://london_quiz/./src/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/index.js"]();
/******/ 	
/******/ })()
;